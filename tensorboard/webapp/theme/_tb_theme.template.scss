/* Copyright 2020 The TensorFlow Authors. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
==============================================================================*/

/***********************************************************
 * VARIABLE FILE IS INLINED WITH GENRULE. DO NOT IMPORT IT.
 * Variable file declares values for $tb-primary, $tb-accent
 * and $tb-warn
 **********************************************************/

// Angular Material theme definition.

// Value for `app-bar` property in $tb-background. Can specify an override in
// _variable.scss to specifically customize this value.
$tb-app-bar-color: mat.get-color-from-palette($tb-primary, default) !default;

$tb-dark-primary: $tb-primary !default;
$tb-dark-accent: $tb-accent !default;
$tb-dark-warn: $tb-warn !default;
// Value for `app-bar` property in $tb-dark-background. Can specify an override
// in _variable.scss to specifically customize this value.
$tb-dark-app-bar-color: mat.get-color-from-palette(
  $tb-dark-primary,
  default
) !default;

$tb-theme: mat.define-light-theme(
  (
    color: (
      primary: $tb-primary,
      accent: $tb-accent,
      warn: $tb-warn,
    ),
    typography: null,
    density: 0,
  )
);

// Overriding mat-light-theme-foreground variables.
$tb-foreground: map_merge(
  mat.$light-theme-foreground-palette,
  (
    text: mat.get-color-from-palette(mat.$gray-palette, 900),
    secondary-text: mat.get-color-from-palette(mat.$gray-palette, 700),
    disabled-text: mat.get-color-from-palette(mat.$gray-palette, 600),
    // TB specific variable.
    border: #ebebeb,
    link: mat.get-color-from-palette(mat.$blue-palette, 700),
    link-visited: mat.get-color-from-palette(mat.$purple-palette, 700),
  )
);
$tb-background: map_merge(
  mat.$light-theme-background-palette,
  (
    app-bar: $tb-app-bar-color,
    // Default is `map.get($grey-palette, 50)`.
    background: #fff,
  )
);

$tb-theme: map_merge(
  $tb-theme,
  (
    foreground: $tb-foreground,
    background: $tb-background,
  )
);

$color: map_merge(
  map_get($tb-theme, 'color'),
  (
    foreground: $tb-foreground,
    background: $tb-background,
  )
);
$tb-theme: map_merge(
  $tb-theme,
  (
    color: $color,
  )
);

$tb-dark-theme: mat.define-dark-theme(
  (
    color: (
      primary: $tb-dark-primary,
      accent: $tb-dark-accent,
      warn: $tb-dark-warn,
    ),
    typography: null,
    density: 0,
  )
);
$tb-dark-foreground: map_merge(
  map-get(mat.get-color-config($tb-dark-theme), foreground),
  (
    border: #555,
    disabled-text: mat.get-color-from-palette(mat.$gray-palette, 700),
    link: mat.get-color-from-palette(mat.$blue-palette, 400),
    link-visited: mat.get-color-from-palette(mat.$purple-palette, 300),
  )
);
$tb-dark-background: map_merge(
  map-get(mat.get-color-config($tb-dark-theme), background),
  (
    app-bar: $tb-dark-app-bar-color,
  )
);
$tb-dark-theme: map_merge(
  $tb-dark-theme,
  (
    background: $tb-dark-background,
    foreground: $tb-dark-foreground,
  )
);

$color-dark: map_merge(
  map_get($tb-dark-theme, 'color'),
  (
    foreground: $tb-dark-foreground,
    background: $tb-dark-background,
  )
);
$tb-dark-theme: map_merge(
  $tb-dark-theme,
  (
    color: $color-dark,
  )
);

/**
 * Mixin to facilitate styling an Angular component for the dark mode.
 * For customization that uses theming object (tb-foreground or tb-background),
 * please refer to `tb-theme-foreground-prop` and `tb-theme-background-prop`.
 *
 * For a large amount of customization, instead of the *-prop API, prefer to use
 * this tb-dark-theme mixin.
 *
 * Example usage:
 *
 * div {
 *   color: red;
 *   background: blue;
 *   @include tb-dark-theme {
 *     background: purple;
 *   }
 * }
 */
@mixin tb-dark-theme {
  @each $selector in & {
    @at-root :host-context(body.dark-mode) #{$selector} {
      @content;
    }
  }
}

@mixin _interal-tb-theme-prop-color(
  $object-name,
  $foreground-or-background,
  $dark-foreground-or-background,
  $css-property,
  $dict-name,
  $css-value-prefix
) {
  $light-color: map-get($foreground-or-background, $dict-name);
  $dark-color: map-get($dark-foreground-or-background, $dict-name);

  @if (not $light-color) {
    @error "Name '#{$dict-name}' is not found in light #{$object-name}.";
  }
  @if (not $dark-color) {
    @error "Name '#{$dict-name}' is not found in dark #{$object-name}.";
  }

  #{$css-property}: $css-value-prefix $light-color;

  @include tb-dark-theme {
    #{$css-property}: $css-value-prefix $dark-color;
  }
}

/**
 * Styles an Angular component for a given CSS property using foreground theming
 * dictionary. This mixin also facilitates theming for the dark mode.
 *
 * Example usage:
 *
 * div {
 *   color: red;
 *   @include tb-theme-foreground-prop(border-left, border, 5px solid);
 *   // `tb-foreground` has the `border` key. Above generates:
 *   // div[ngcomponentweirdid] {
 *   //   border-left: 1px solid map_get($tb-foreground, border);
 *   // }
 *   // :host-context(body.dark-mode) div[ngcomponentweirdid] {
 *   //   border-left: 1px solid map_get($tb-dark-foreground, border);
 *   // }
 *   //
 *   // Third argument is optional. In the example below, `color` only takes
 *   // color value so it is not needed.
 *   @include tb-theme-foreground-prop(color, secondary-text);
 * }
 */
@mixin tb-theme-foreground-prop(
  $css-property,
  $dict-name,
  $css-value-prefix: null
) {
  @include _interal-tb-theme-prop-color(
    foreground,
    $tb-foreground,
    $tb-dark-foreground,
    $css-property,
    $dict-name,
    $css-value-prefix
  );
}

/**
 * Styles an Angular component for a given CSS property using background theming
 * dictionary. This mixin also facilitates theming for the dark mode.
 *
 * Example usage:
 *
 * div {
 *   color: red;
 *   @include tb-theme-background-prop(backgroud-color, background);
 *   // Above generates:
 *   // div[ngcomponentweirdid] {
 *   //   backgroud-color: map_get($tb-background, background);
 *   // }
 *   // :host-context(body.dark-mode) div[ngcomponentweirdid] {
 *   //   backgroud-color: map_get($tb-dark-background, background);
 *   // }
 * }
 */
@mixin tb-theme-background-prop(
  $css-property,
  $dict-name,
  $css-value-prefix: null
) {
  @include _interal-tb-theme-prop-color(
    background,
    $tb-background,
    $tb-dark-background,
    $css-property,
    $dict-name,
    $css-value-prefix
  );
}

// Apply themed style for the global stylesheet (styles.scss).
@mixin tb-global-themed-styles() {
  // TODO(JamesHollyer): remove legacy component themes once all components
  // are migrated.
  @include mat.core();
  @include mat.all-legacy-component-typographies();
  @include mat.all-component-typographies();
  // Include all theme-styles for the components based on the current theme.
  @include mat.all-component-themes($tb-theme);
  @include mat.all-legacy-component-themes($tb-theme);
  @include mat.all-component-themes($tb-theme);

  body {
    // Prevents ngx-color-picker from creating a scrollbar and misposition.
    overflow: hidden;
  }

  // Prevent color-picker from briefly showing scrollbar when calculating its
  // position.
  .cdk-overlay-container {
    // Prevent color-picker from briefly showing scrollbar when calculating its
    // position.
    contain: strict;
    // The old dialog had a default 24px padding. When migrating to the
    // new dialog this padding was added to avoid adding it to them all
    // individually.
    .mat-mdc-dialog-surface {
      padding: 16px;
    }
  }

  a:not(.mdc-button, .mdc-icon-button) {
    color: map-get($tb-foreground, link);

    &:visited {
      color: map-get($tb-foreground, link-visited);
    }
  }

  body,
  body.dark-mode {
    mat-slider {
      --mdc-slider-handle-width: 12px;
      --mdc-slider-handle-height: 12px;
      --mdc-slider-active-track-height: 2px;
      --mdc-slider-inactive-track-height: 2px;
    }

    a,
    button.mat-mdc-button-base {
      --tb-icon-width: 24px;
      --tb-icon-height: 24px;
      --tb-icon-button-width: 40px;
      --tb-icon-button-height: 40px;
      --mdc-text-button-label-text-tracking: normal;
      --mdc-filled-button-label-text-tracking: normal;
      --mdc-outlined-button-label-text-tracking: normal;
      --mdc-protected-button-label-text-tracking: normal;

      &[mat-icon-button].mat-mdc-icon-button {
        width: var(--tb-icon-button-width);
        height: var(--tb-icon-button-height);
        display: inline-flex;
        justify-content: center;
        align-items: center;

        .mat-mdc-button-touch-target {
          height: 100%;
          width: 100%;
        }
      }

      mat-icon.mat-icon {
        flex-shrink: 0;
      }

      mat-icon.mat-icon,
      svg {
        width: var(--tb-icon-size, var(--tb-icon-width));
        height: var(--tb-icon-size, var(--tb-icon-height));
        line-height: var(--tb-icon-size, var(--tb-icon-height));
      }
    }
  }

  // Cannot use `tb-dark-theme` as :host-context in the global stylesheet is
  // meaningless.
  body.dark-mode {
    background-color: map-get($tb-dark-background, background);

    a:not(.mdc-button, .mdc-icon-button) {
      color: map-get($tb-dark-foreground, link);

      &:visited {
        color: map-get($tb-dark-foreground, link-visited);
      }
    }

    // TODO(JamesHollyer): remove legacy component themes once all components
    // are migrated.
    @include mat.all-component-themes($tb-dark-theme);
    @include mat.all-legacy-component-themes($tb-dark-theme);
  }
}
